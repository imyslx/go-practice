// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "goa Practice": hosts Resource Client
//
// Command:
// $ goagen
// --design=github.com/imyslx/go-practice/goa/design
// --out=$(GOPATH)/src/github.com/imyslx/go-practice/goa
// --version=v1.3.0

package client

import (
	"bytes"
	"context"
	"fmt"
	"net/http"
	"net/url"
)

// AddHostsPayload is the hosts add action payload.
type AddHostsPayload struct {
	// ホスト名
	Hostname string `form:"Hostname" json:"Hostname" xml:"Hostname"`
	// IPアドレス
	Ipaddr string `form:"Ipaddr" json:"Ipaddr" xml:"Ipaddr"`
}

// AddHostsPath computes a request path to the add action of hosts.
func AddHostsPath() string {

	return fmt.Sprintf("/api/v1/hosts/add")
}

// Hostの追加
func (c *Client) AddHosts(ctx context.Context, path string, payload *AddHostsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewAddHostsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewAddHostsRequest create the request corresponding to the add action endpoint of the hosts resource.
func (c *Client) NewAddHostsRequest(ctx context.Context, path string, payload *AddHostsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}

// DeleteHostsPayload is the hosts delete action payload.
type DeleteHostsPayload struct {
	// ホスト名
	Hostname string `form:"Hostname" json:"Hostname" xml:"Hostname"`
	// IPアドレス
	Ipaddr string `form:"Ipaddr" json:"Ipaddr" xml:"Ipaddr"`
}

// DeleteHostsPath computes a request path to the delete action of hosts.
func DeleteHostsPath() string {

	return fmt.Sprintf("/api/v1/hosts/delete")
}

// Hostの削除
func (c *Client) DeleteHosts(ctx context.Context, path string, payload *DeleteHostsPayload, contentType string) (*http.Response, error) {
	req, err := c.NewDeleteHostsRequest(ctx, path, payload, contentType)
	if err != nil {
		return nil, err
	}
	return c.Client.Do(ctx, req)
}

// NewDeleteHostsRequest create the request corresponding to the delete action endpoint of the hosts resource.
func (c *Client) NewDeleteHostsRequest(ctx context.Context, path string, payload *DeleteHostsPayload, contentType string) (*http.Request, error) {
	var body bytes.Buffer
	if contentType == "" {
		contentType = "*/*" // Use default encoder
	}
	err := c.Encoder.Encode(payload, &body, contentType)
	if err != nil {
		return nil, fmt.Errorf("failed to encode body: %s", err)
	}
	scheme := c.Scheme
	if scheme == "" {
		scheme = "http"
	}
	u := url.URL{Host: c.Host, Scheme: scheme, Path: path}
	req, err := http.NewRequest("POST", u.String(), &body)
	if err != nil {
		return nil, err
	}
	header := req.Header
	if contentType == "*/*" {
		header.Set("Content-Type", "application/json")
	} else {
		header.Set("Content-Type", contentType)
	}
	return req, nil
}
