// Code generated by goagen v1.3.0, DO NOT EDIT.
//
// API "goa Practice": Application Contexts
//
// Command:
// $ goagen
// --design=github.com/imyslx/go-practice/goa/design
// --out=$(GOPATH)/src/github.com/imyslx/go-practice/goa
// --version=v1.3.0

package app

import (
	"context"
	"github.com/goadesign/goa"
	"net/http"
)

// AddHostsContext provides the hosts add action context.
type AddHostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *AddHostsPayload
}

// NewAddHostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the hosts controller add action.
func NewAddHostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*AddHostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := AddHostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// addHostsPayload is the hosts add action payload.
type addHostsPayload struct {
	// ホスト名
	Hostname *string `form:"Hostname,omitempty" json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// IPアドレス
	Ipaddr *string `form:"Ipaddr,omitempty" json:"Ipaddr,omitempty" xml:"Ipaddr,omitempty"`
}

// Finalize sets the default values defined in the design.
func (payload *addHostsPayload) Finalize() {
	var defaultIpaddr = ""
	if payload.Ipaddr == nil {
		payload.Ipaddr = &defaultIpaddr
	}
}

// Validate runs the validation rules defined in the design.
func (payload *addHostsPayload) Validate() (err error) {
	if payload.Hostname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Hostname"))
	}
	if payload.Ipaddr == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Ipaddr"))
	}
	return
}

// Publicize creates AddHostsPayload from addHostsPayload
func (payload *addHostsPayload) Publicize() *AddHostsPayload {
	var pub AddHostsPayload
	if payload.Hostname != nil {
		pub.Hostname = *payload.Hostname
	}
	if payload.Ipaddr != nil {
		pub.Ipaddr = *payload.Ipaddr
	}
	return &pub
}

// AddHostsPayload is the hosts add action payload.
type AddHostsPayload struct {
	// ホスト名
	Hostname string `form:"Hostname" json:"Hostname" xml:"Hostname"`
	// IPアドレス
	Ipaddr string `form:"Ipaddr" json:"Ipaddr" xml:"Ipaddr"`
}

// Validate runs the validation rules defined in the design.
func (payload *AddHostsPayload) Validate() (err error) {
	if payload.Hostname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Hostname"))
	}
	if payload.Ipaddr == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Ipaddr"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *AddHostsContext) OK(r *Result) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *AddHostsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}

// DeleteHostsContext provides the hosts delete action context.
type DeleteHostsContext struct {
	context.Context
	*goa.ResponseData
	*goa.RequestData
	Payload *DeleteHostsPayload
}

// NewDeleteHostsContext parses the incoming request URL and body, performs validations and creates the
// context used by the hosts controller delete action.
func NewDeleteHostsContext(ctx context.Context, r *http.Request, service *goa.Service) (*DeleteHostsContext, error) {
	var err error
	resp := goa.ContextResponse(ctx)
	resp.Service = service
	req := goa.ContextRequest(ctx)
	req.Request = r
	rctx := DeleteHostsContext{Context: ctx, ResponseData: resp, RequestData: req}
	return &rctx, err
}

// deleteHostsPayload is the hosts delete action payload.
type deleteHostsPayload struct {
	// ホスト名
	Hostname *string `form:"Hostname,omitempty" json:"Hostname,omitempty" xml:"Hostname,omitempty"`
	// IPアドレス
	Ipaddr *string `form:"Ipaddr,omitempty" json:"Ipaddr,omitempty" xml:"Ipaddr,omitempty"`
}

// Finalize sets the default values defined in the design.
func (payload *deleteHostsPayload) Finalize() {
	var defaultIpaddr = ""
	if payload.Ipaddr == nil {
		payload.Ipaddr = &defaultIpaddr
	}
}

// Validate runs the validation rules defined in the design.
func (payload *deleteHostsPayload) Validate() (err error) {
	if payload.Hostname == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Hostname"))
	}
	if payload.Ipaddr == nil {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Ipaddr"))
	}
	return
}

// Publicize creates DeleteHostsPayload from deleteHostsPayload
func (payload *deleteHostsPayload) Publicize() *DeleteHostsPayload {
	var pub DeleteHostsPayload
	if payload.Hostname != nil {
		pub.Hostname = *payload.Hostname
	}
	if payload.Ipaddr != nil {
		pub.Ipaddr = *payload.Ipaddr
	}
	return &pub
}

// DeleteHostsPayload is the hosts delete action payload.
type DeleteHostsPayload struct {
	// ホスト名
	Hostname string `form:"Hostname" json:"Hostname" xml:"Hostname"`
	// IPアドレス
	Ipaddr string `form:"Ipaddr" json:"Ipaddr" xml:"Ipaddr"`
}

// Validate runs the validation rules defined in the design.
func (payload *DeleteHostsPayload) Validate() (err error) {
	if payload.Hostname == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Hostname"))
	}
	if payload.Ipaddr == "" {
		err = goa.MergeErrors(err, goa.MissingAttributeError(`raw`, "Ipaddr"))
	}
	return
}

// OK sends a HTTP response with status code 200.
func (ctx *DeleteHostsContext) OK(r *Result) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.result+json")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 200, r)
}

// BadRequest sends a HTTP response with status code 400.
func (ctx *DeleteHostsContext) BadRequest(r error) error {
	if ctx.ResponseData.Header().Get("Content-Type") == "" {
		ctx.ResponseData.Header().Set("Content-Type", "application/vnd.goa.error")
	}
	return ctx.ResponseData.Service.Send(ctx.Context, 400, r)
}
